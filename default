#!/usr/bin/python
# -*- coding: utf-8 -*-

from wsgiref.handlers import CGIHandler
import os
import datetime
from textwrap import dedent

import logging
from logging import FileHandler

from flask import Flask, Response, render_template

# move to home directory so
# dumptruck can find sqlite file
os.chdir('/home')
import scraperwiki

app = Flask(__name__)

# Error handling
logger = FileHandler('/home/http/error.txt')
logger.setLevel(logging.WARNING)
app.logger.addHandler(logger)

# Avoid default Flask redirect when a
# URL is requested without a final slash
app.url_map.strict_slashes = False

# Get the "root" url path, because
# Flask isn't running at the domain root
path = os.environ['PATH_INFO']
root = '/'.join(path.split('/')[0:5])

# Stop extra whitespace creeping
# into Jinja templates
app.jinja_env.trim_blocks = True
app.jinja_env.lstrip_blocks = True

request_url = 'https://{}{}'.format(os.environ['HTTP_HOST'], os.environ['PATH_INFO'])


@app.route(root + "/")
def show_collections():
    tables = scraperwiki.sql.show_tables().keys()
    resp = Response()
    resp.headers['Content-Type'] = 'application/xml;charset=utf-8'
    resp.data = render_template('collections.xml', base_url=request_url, collections=tables)
    return resp


@app.route(root + "/<collection>/")
def show_collection(collection):
    # TODO: check that `collection` table actually exists
    entries = get_entries_in_collection(collection)
    resp = Response()
    resp.headers['Content-Type'] = 'application/xml;charset=utf-8'
    resp.data = render_template('collection.xml', base_url=request_url, collection=collection, entries=entries)
    return resp


def get_entries_in_collection(collection):
    rows = scraperwiki.sql.select('rowid, * FROM "{collection}"'.format(collection=collection))
    entries = []
    for row in rows:
        entry = {
            'url': u"{}({})".format(request_url, row['rowid']),
            'rowid': row['rowid'],
            'cells': []
        }
        for column, value in row.iteritems():
            if column != 'rowid':
                entry['cells'].append({
                    'column': column,
                    'value': value
                })
        entries.append(entry)
    return entries


CGIHandler().run(app)
